# Import necessary libraries
import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import time

# Function to fetch the complete page content, including expanding "More Details" and similar buttons
def fetch_full_page_content(url, driver):
    try:
        print(f"Fetching content for URL: {url}")
        driver.get(url)

        # Wait for the page to fully load
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.TAG_NAME, "body")))

        # Possible texts for "More Details" or similar buttons
        button_texts = [
            "More Details", "פרטים נוספים", "Show More", "Expand", "See Details",
            "הצג פרטים", "הרחב", "ראה פרטים"
        ]

        # Click buttons if present
        for text in button_texts:
            try:
                buttons = driver.find_elements(By.XPATH, f"//button[contains(text(), '{text}')]")
                for button in buttons:
                    driver.execute_script("arguments[0].click();", button)
                    time.sleep(1)  # Allow time for content to load
            except Exception as e:
                print(f"No button found for text '{text}' or error clicking: {e}")

        # Scroll to the bottom of the page to trigger dynamic content loading
        last_height = driver.execute_script("return document.body.scrollHeight")
        while True:
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(2)  # Wait for new content to load
            new_height = driver.execute_script("return document.body.scrollHeight")
            if new_height == last_height:  # Break if no more content is loaded
                break
            last_height = new_height

        # Get the full page source
        page_source = driver.page_source
        return page_source
    except Exception as e:
        print(f"Error fetching content for URL {url}: {e}")
        return None

# Function to save content to a TXT file
def save_content_to_file(content, url):
    try:
        # Extract the file name from the URL
        file_name = url.split("/")[-1].replace("?", "_") + ".txt"
        file_path = os.path.join(os.getcwd(), file_name)
        with open(file_path, "w", encoding="utf-8") as file:
            file.write(content)
        print(f"Content saved to {file_name}")
    except Exception as e:
        print(f"Error saving content to file for URL {url}: {e}")

# Main script execution
def main():
    # List of URLs to process
    urls = [
        "https://www.gov.il/he/Departments/DynamicCollectors/guidelines-state-attorney",
        "https://www.gov.il/he/Departments/DynamicCollectors/menifa",
        "https://www.gov.il/he/departments/dynamiccollectors/conditionalagreements",
        "https://www.gov.il/he/departments/dynamiccollectors/hesdermutne",
        "https://www.gov.il/he/collectors/policies?officeId=c0d8ba69-e309-4fe5-801f-855971774a90",
        "https://www.gov.il/he/collectors/informationtype?officeId=c0d8ba69-e309-4fe5-801f-855971774a90",
        "https://www.gov.il/he/collectors/publications?officeId=c0d8ba69-e309-4fe5-801f-855971774a90",
        "https://www.gov.il/he/Departments/DynamicCollectors/conditional-order"
    ]

    # Initialize the Selenium WebDriver
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service)

    # Iterate over each URL
    for url in urls:
        content = fetch_full_page_content(url, driver)
        if content:
            save_content_to_file(content, url)

    # Close the WebDriver
    driver.quit()

# Execute the script
if __name__ == "__main__":
    main()
